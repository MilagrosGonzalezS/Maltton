{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport useInterval from \"./UseInterval\";\n\nfunction useSlider({\n  total = 0,\n  // the length of the slide array\n  enabled = false,\n  // pauses/disables the player\n  useLoaded = false,\n  // this allows for delayed loads like images or embeds\n  speed = 1000,\n  // speed in milliseconds to show each slide\n  loop = true // should it start back at the beginning\n\n}) {\n  _s();\n\n  const [offset, setOffset] = React.useState(0);\n  const [items, setItems] = React.useState([]);\n\n  function incrementOffset() {\n    if (offset === total - 1) {\n      setOffset(loop ? 0 : offset);\n    } else {\n      setOffset(offset + 1);\n    }\n  }\n\n  function addItem(ref) {\n    setItems([...items, ref]);\n  }\n\n  const loaded = useLoaded ? items.length === total : true;\n  useInterval(() => {\n    if (loaded && enabled && offset < total) {\n      incrementOffset();\n    }\n  }, speed);\n  return {\n    offset,\n    // this is the current index of the slider\n    addItem // this takes a ref and adds it to the items array to see if all have loaded\n\n  };\n}\n\n_s(useSlider, \"n3GTnFBsBalsZa4bRVN6vLmEIEU=\", false, function () {\n  return [useInterval];\n});\n\nexport default useSlider;","map":{"version":3,"sources":["C:/proyectos/ProyectoMaltton/src/components/Carousel/useSlider.js"],"names":["React","useInterval","useSlider","total","enabled","useLoaded","speed","loop","offset","setOffset","useState","items","setItems","incrementOffset","addItem","ref","loaded","length"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,SAAT,CAAmB;AACjBC,EAAAA,KAAK,GAAG,CADS;AACN;AACXC,EAAAA,OAAO,GAAG,KAFO;AAEA;AACjBC,EAAAA,SAAS,GAAG,KAHK;AAGE;AACnBC,EAAAA,KAAK,GAAG,IAJS;AAIH;AACdC,EAAAA,IAAI,GAAG,IALU,CAKJ;;AALI,CAAnB,EAMG;AAAA;;AACD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,KAAK,CAACU,QAAN,CAAe,CAAf,CAA5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,KAAK,CAACU,QAAN,CAAe,EAAf,CAA1B;;AAEA,WAASG,eAAT,GAA2B;AACzB,QAAIL,MAAM,KAAKL,KAAK,GAAG,CAAvB,EAA0B;AACxBM,MAAAA,SAAS,CAACF,IAAI,GAAG,CAAH,GAAOC,MAAZ,CAAT;AACD,KAFD,MAEO;AACLC,MAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACD;AACF;;AAED,WAASM,OAAT,CAAiBC,GAAjB,EAAsB;AACpBH,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,GAAX,CAAD,CAAR;AACD;;AAED,QAAMC,MAAM,GAAGX,SAAS,GAAGM,KAAK,CAACM,MAAN,KAAiBd,KAApB,GAA4B,IAApD;AAEAF,EAAAA,WAAW,CAAC,MAAM;AAChB,QAAIe,MAAM,IAAIZ,OAAV,IAAqBI,MAAM,GAAGL,KAAlC,EAAyC;AACvCU,MAAAA,eAAe;AAChB;AACF,GAJU,EAIRP,KAJQ,CAAX;AAMA,SAAO;AACLE,IAAAA,MADK;AACG;AACRM,IAAAA,OAFK,CAEI;;AAFJ,GAAP;AAID;;GAlCQZ,S;UAwBPD,W;;;AAYF,eAAeC,SAAf","sourcesContent":["import * as React from \"react\";\r\nimport useInterval from \"./UseInterval\";\r\n\r\nfunction useSlider({\r\n  total = 0, // the length of the slide array\r\n  enabled = false, // pauses/disables the player\r\n  useLoaded = false, // this allows for delayed loads like images or embeds\r\n  speed = 1000, // speed in milliseconds to show each slide\r\n  loop = true, // should it start back at the beginning\r\n}) {\r\n  const [offset, setOffset] = React.useState(0);\r\n  const [items, setItems] = React.useState([]);\r\n\r\n  function incrementOffset() {\r\n    if (offset === total - 1) {\r\n      setOffset(loop ? 0 : offset);\r\n    } else {\r\n      setOffset(offset + 1);\r\n    }\r\n  }\r\n\r\n  function addItem(ref) {\r\n    setItems([...items, ref]);\r\n  }\r\n\r\n  const loaded = useLoaded ? items.length === total : true;\r\n\r\n  useInterval(() => {\r\n    if (loaded && enabled && offset < total) {\r\n      incrementOffset();\r\n    }\r\n  }, speed);\r\n\r\n  return {\r\n    offset, // this is the current index of the slider\r\n    addItem, // this takes a ref and adds it to the items array to see if all have loaded\r\n  };\r\n}\r\n\r\nexport default useSlider;\r\n"]},"metadata":{},"sourceType":"module"}